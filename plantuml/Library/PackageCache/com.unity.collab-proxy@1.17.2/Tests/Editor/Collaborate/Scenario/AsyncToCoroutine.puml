@startuml
class CoroutineSynchronizationContext {
    + <<override>> Send(callback:SendOrPostCallback, state:object) : void
    + <<override>> Post(callback:SendOrPostCallback, state:object) : void
    + Exec() : void
}
class AsyncToCoroutine {
    + AsyncToCoroutine(cleanup:bool)
    + Run(func:Func<Task>) : IEnumerator
    + Run(action:Action) : IEnumerator
}
class WorkRequest <<struct>> {
    + WorkRequest(callback:SendOrPostCallback, state:object, waitHandle:ManualResetEvent)
    + Invoke() : void
}
class "Func`1"<T> {
}
SynchronizationContext <|-- CoroutineSynchronizationContext
AsyncToCoroutine --> "Before<Task>" "Func`1"
AsyncToCoroutine --> "After<Task>" "Func`1"
CoroutineSynchronizationContext +-- WorkRequest
@enduml
